AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template
  that creates a VPC with DNS and public IPs enabled. Note that you are billed
  for the AWS resources that you use when you create a stack from this template.
Resources:
# VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      # DependsOn: !Ref NATGateway # forcing depencing
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: project2-vpc
# PublicSubnet
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/18
      AvailabilityZone: "eu-west-2a"
      Tags:
      - Key: Name
        Value: Public-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/18
      AvailabilityZone: "eu-west-2b"
      Tags:
      - Key: Name
        Value: Public-2
  
# InternetGateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public RouteTable
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PublicRouteTable
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable 
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable 
# PublicNACL
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WordPress-Stack
  SubnetNetworkAclAssociationPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
# Private Subnet
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/19
      AvailabilityZone: "eu-west-2a"
      Tags:
      - Key: Name
        Value: Private-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.160.0/19
      AvailabilityZone: "eu-west-2b"
      Tags:
      - Key: Name
        Value: Private-2
  # PrivateSubnet3:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.192.0/19
  #     AvailabilityZone: "us-west-1d"
  #     Tags:
  #     - Key: Name
  #       Value:  Private-3
  # PrivateSubnet4:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.224.0/19
  #     AvailabilityZone: "us-west-1b"
  #     Tags:
  #     - Key: Name
  #       Value:  Private-4
# PrivateRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
# Public IP      
  NatPublicIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPC
    Properties:
      Domain: vpc
# Natgatway
  NatGateway: # natgateway creation
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatPublicIP
    Properties:
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  # PrivateSubnet3RouteTableAssociation:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet3
  #     RouteTableId: !Ref PrivateRouteTable 
  # PrivateSubnet4RouteTableAssociation:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet4
  #     RouteTableId: !Ref PrivateRouteTable
# PrivateNetworkAcl
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref VPC      
  InboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNetworkAcl
       RuleNumber: 100
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  OutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  PrivateSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl
  # PrivateSubnet3NetworkAclAssociation:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet3
  #     NetworkAclId: !Ref PrivateNetworkAcl
  # PrivateSubnet4NetworkAclAssociation:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet4
  #     NetworkAclId: !Ref PrivateNetworkAcl
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
  ImportedKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: keywink
      PublicKeyMaterial: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCo0kCsYth5lRrtbCshAul8htTLzRd4HFZMJ/0gXn/aVvZVqxo7cyGK/2DG1NZ4fGPUlgKKWiuI7EDCNOT/BqXTfW+KvRq3M+oaGwfHWBLMkPv+Iqq5cjpOeMp2KtONMk+slA/0XfpIertUWmb0YN5Eb5T+W7bNfWzxfOEeh20akdDuBYzcSPTrx8mkowP+eKvCdsWXXHiqOHcAlaytszMWY/QanWaAzZWoChVYx5R9pfUyrnsML3oytTKIZe14ZrDB7bIDGFgb45SYrgFr4NBr58NOztFjwYO69hIydtyo68N5stdwh/G8x03F8BdEoLtRGIUrAlJ/1xn2Ib7DOV6d
  WindowsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-073bb7464cc51df7c
      KeyName: !Ref ImportedKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'WebServerSecurityGroup'
          SubnetId:
            Ref: 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: Windows-EC2
  PrivateServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: All traffic to CIDR
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 10.0.0.0/16
      # SecurityGroupEgress:
      #   - IpProtocol: -1
      #     FromPort: 0
      #     ToPort: 65535
      #     CidrIp: 0.0.0.0/0
      # SecurityGroupIngress:
      #   - IpProtocol: tcp
      #     FromPort: '3389'
      #     ToPort: '3389'
      #     CidrIp: 10.0.0.0/16
  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0ad97c80f2dfe623b
      KeyName: !Ref ImportedKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'False'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'PrivateServerSecurityGroup'
          SubnetId:
            Ref: 'PrivateSubnet1'
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y 
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo systemctl is-enabled httpd
          sudo usermod -a -G apache ec2-user
          groups ec2-user
          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          cd /var/www/html/
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          mv  -v wordpress/* /var/www/html/
          sudo chown -R apache:apache /var/www/html
      Tags:
        - Key: Name
          Value: PrivateWordpress